version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.1

commands:
  install-aws:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install-ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible   
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install-nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack-name:
        default: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.stack-name>> --region us-east-1
  clear-bucket:
    description: Clear s3 bucket.
    parameters:
      bucket-name:
        default: "udapeople-${CIRCLE_WORKFLOW_ID:0:5}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://<< parameters.bucket-name>>" --recursive
  slack_notify:
    description: "Send a message in Slack"
    steps:
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_workflow-id:0:5}      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl https://keyvalue.immanuel.co/api/KeyVal/GetValue/$(cat ~/appkey.txt)/migration_<<parameters.workflow-id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

defaults: &nodeDockerImage
  docker:
      - image: circleci/node:13.8.0

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Started running workflow*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-build"
      - run: 
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run: 
          name: Backend-end test
          command: |
            cd backend
            npm i
            npm run test
            
  scan-frontend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-build"
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --region us-east-1
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --region us-east-1 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filter Name="tag:Name",Values="backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: check inventory content
          command: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: Get memstash key
          command: |
            curl https://keyvalue.immanuel.co/api/KeyVal/GetAppKey > ~/appkey.txt
      - run: cat ~/appkey.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - appkey.txt
      - destroy-environment:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - destroy-environment:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"     
      - slack_notify    

    

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      # - install-aws
      - add_ssh_keys:
          fingerprints: ["4f:e8:df:36:f0:c7:fc:f3:33:a3:bc:73:e6:08:5e:87"]
      - attach_workspace:
          at: ~/
      - run:
          name: check inventory content
          command: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies (ansible)
          command: apk add --update ansible
      - run:
          name: Install dependencies (openssh)
          command: |
            apk add --update openssh # Install openssh
      - run:
          name: "Run Playbook and configure server"
          command: ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - destroy-environment:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"      
      - slack_notify   

  run-migrations:
    <<: *nodeDockerImage
    steps:
      - checkout
      - install-aws
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm run migrations > dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/dump.txt   
            then
              curl -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/$(cat ~/appkey.txt)/migration_${CIRCLE_WORKFLOW_ID:0:5}/1
              fi
      - destroy-environment:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - destroy-environment:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"
      - revert-migrations    
      - slack_notify   

  deploy-frontend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - install-aws
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://$(tail -n 1 ~/project/.circleci/ansible/inventory.txt):3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - clear-bucket
      - destroy-environment:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - destroy-environment:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"
      - revert-migrations    
      - slack_notify    
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws
      - install-nodejs
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["4f:e8:df:36:f0:c7:fc:f3:33:a3:bc:73:e6:08:5e:87"]
      - attach_workspace:
          at: ~/

      - run:
          name: Copy backend to ansible files folder
          command: |
            mkdir ./.circleci/ansible/roles/deploy/files/
            cp -r ./backend ./.circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

      - clear-bucket
      - destroy-environment:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - destroy-environment:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"
      - revert-migrations    
      - slack_notify    

  smoke-test:
    docker:
       - image: cimg/base:stable
    steps:
      - checkout
      - install-aws
      - install-nodejs
      - install-ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export API_URL="http://$(tail -n 1 ~/project/.circleci/ansible/inventory.txt):3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://$(tail -n 1 ~/project/.circleci/ansible/inventory.txt):3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - clear-bucket
      - destroy-environment:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - destroy-environment:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"
      - revert-migrations    
      - slack_notify    

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws
      - install-nodejs
      - run:
          name: Export Old Workflow ID
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            $(curl https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/$(cat ~/appkey.txt)/oldWorkflowId/$OLD_WORKFLOW_ID)
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name OldStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:5}" \
            --tags project=udapeople
      - clear-bucket
      - destroy-environment:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - destroy-environment:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"
      - revert-migrations    
      - slack_notify     

cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Delete previous stacks and files
          command: |
            export OldWorkflowID=$(curl --insecure kvdb.io/W7KRuoNnqQLu3bNQApL3Bi/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID    

            $(curl https://keyvalue.immanuel.co/api/KeyVal/GetValue/$(cat ~/appkey.txt)/oldWorkflowId)
            export Stack=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            
            echo Stack names: "${STACKS[@]}" > a.txt

            cat a.txt

            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-234965478117" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: guildOfMages
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: guildOfMages
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: guildOfMages
      - run-migrations:
          requires: [configure-infrastructure]
          context: guildOfMages
      - deploy-frontend:
          requires: [run-migrations]
          context: guildOfMages
      - deploy-backend:
          requires: [run-migrations]
          context: guildOfMages
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]